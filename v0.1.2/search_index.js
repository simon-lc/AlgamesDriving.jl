var documenterSearchIndex = {"docs":
[{"location":"registering.html#Registering-Your-Package","page":"Registering a Package","title":"Registering Your Package","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"Registering a package with the Julia general  registry is pretty straight forward.o","category":"page"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"To register a new release, follow the exact same process (skipping step 1 since you'll already have JuliaRegistrator installed).","category":"page"},{"location":"registering.html#.-Add-JuliaRegistrator","page":"Registering a Package","title":"1. Add JuliaRegistrator","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"Add JuliaRegistrator to your repo. Follow the instructions in the repo. You should arrive at a screen that looks like the image below for your user/organization settings. Add your new repo.","category":"page"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"(Image: add_registrator)","category":"page"},{"location":"registering.html#.-Verify-the-version","page":"Registering a Package","title":"2. Verify the version","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"The version is set by your Project.toml. In the example below, the version is v0.1.0. By default, most new repositories should be v0.1.0.","category":"page"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"name = \"AlgamesDriving\"\nuuid = \"bfba84be-7fa7-49e4-96a7-8b4754465918\"\nauthors = [\"Brian Jackson <simon-lc@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nLinearAlgebra = \"37e2e46d-f89d-539d-b4ee-838fcccc9c8e\"\nStaticArrays = \"90137ffa-7385-5640-81b9-e52037218182\"\n\n[compat]\nStaticArrays = \"0.12\"\njulia = \"1\"","category":"page"},{"location":"registering.html#.-Use-JuliaRegistrator","page":"Registering a Package","title":"3. Use JuliaRegistrator","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"Comment @JuliaRegistrator register on the commit/branch you would like to register. This can be done either by a) creating a new issue and commenting in the issue (top image below), or b) commenting on a commit (bottom image below).","category":"page"},{"location":"registering.html#New-Issue","page":"Registering a Package","title":"New Issue","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"(Image: issue)","category":"page"},{"location":"registering.html#Comment-on-a-commit","page":"Registering a Package","title":"Comment on a commit","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"(Image: commit_comment)","category":"page"},{"location":"registering.html#.-Check-the-pull-request","page":"Registering a Package","title":"4. Check the pull request","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"Check the status of the pull request on JuliaRegistries/General (link is in the auto-generated comment below yours) to see if it passes the rules for auto-merging. If it fails, make the fixes and make a new comment with @JuliaRegistrator register. It will simply modify the previous pull request.","category":"page"},{"location":"registering.html#.-Create-a-Release","page":"Registering a Package","title":"5. Create a Release","text":"","category":"section"},{"location":"registering.html","page":"Registering a Package","title":"Registering a Package","text":"If you have TagBot installed, you're good to go! Otherwise, create a release with the new version in GitHub.","category":"page"},{"location":"package_docs.html#Sample-Documentation","page":"Sample Documentation","title":"Sample Documentation","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"CurrentModule = AlgamesDriving","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"This page shows how to pull in the doc strings in your code.","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"The first thing to do is insert","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@meta\nCurrentModule = AlgamesDriving  # your package name here\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"which sets the module to your package so you don't have to prepend the methods with your package.","category":"page"},{"location":"package_docs.html#Pulling-in-some-docstrings","page":"Sample Documentation","title":"Pulling in some docstrings","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"First, let's pull in the docstrings for vec_add! and vec_sub!, which we can do using","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@docs\nvec_add!\nvec_sub!\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"This inserts the following into our markdown file:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"vec_add!\nvec_sub!","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"Notice how in the vec_add! docstring we included both signatures in a single docstring, but vec_sub! had two separate docstrings. We can select only one of the docstrings by filtering with the input signature:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@docs\nvec_sub!(::VecPair)\nnorm(::VecPair)\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"which inserts only one docstring,","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"vec_sub!(::VecPair)","category":"page"},{"location":"package_docs.html#Linking-Docstrings","page":"Sample Documentation","title":"Linking Docstrings","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"We can link to the docstring for vec_add! using the [vec_add!](@ref) syntax. Note the tick marks around the method, inside the square brackets. We can also do this inside the docstring themselves, like we do in the docstring for VecPair:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"VecPair","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"For illustration, we also show in this docstring how to include LaTeX math inside the docstring. For reference, we've copied the raw docstring below:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"\"\"\"\n    VecPair{V}\n\nHolds two vectors of the same length and type.\n\nThe vectors can be retrieved using `v.a` and `v.b` or `v[1]` and `v[2]`.\nSupports [`vec_add!`](@ref) and [`vec_sub!`](@ref).\n\nHere is some ``\\\\LaTeX`` for you:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"math     \\sum{i=1}^N xk^T Qk xk","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"\n# Constructors\n    VecPair{V}(a,b)\n    VecPair(a::V, b::V)\n    VecPair(a::StaticVector, b::StaticVector)\n\n\"\"\"","category":"page"},{"location":"tests.html#Adding-Tests","page":"Adding Tests","title":"Adding Tests","text":"","category":"section"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"Let's say we've added some code to our repo (check out src/newcode.jl) and now want to add some unit tests. All unit tests live in the test/ directory and are run via the test/runtests.jl file. Typically the runtests.jl file loads in any packages needed to run the tests, including Test and the actual package being tested, and then includes files that have defined @testsets. See the test/ directory for an example.","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"If you're using Julia v1.2+, we add the test dependencies the same way we add package dependencies: via the package manager. We first activate the test environment:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"] activate /path/to/AlgamesDriving/test","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"and then add the packages","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"(test) pkg> add Test\n(test) pkg> add StaticArrays\n(test) pkg> add LinearAlgebra","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"Adding the [compat] entries for the test Project.toml is suggested, but not required.","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"We can now run the test suite using the package manager. It's usually a good idea to restart Julia and run the command from the default environment:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"] test AlgamesDriving","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"which should return something similar to this:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"(Image: tests)","category":"page"},{"location":"bots.html#Additional-GitHub-Actions","page":"Additional GitHub Actions","title":"Additional GitHub Actions","text":"","category":"section"},{"location":"bots.html","page":"Additional GitHub Actions","title":"Additional GitHub Actions","text":"Here are a few additional GitHub actions that you may find useful.","category":"page"},{"location":"bots.html#TagBot","page":"Additional GitHub Actions","title":"TagBot","text":"","category":"section"},{"location":"bots.html","page":"Additional GitHub Actions","title":"Additional GitHub Actions","text":"Automatically creates tags/releases in your GitHub repo when you register a release with the Julia general registry. Create a new action and copy the contents of this file.","category":"page"},{"location":"bots.html#CompatHelper","page":"Additional GitHub Actions","title":"CompatHelper","text":"","category":"section"},{"location":"bots.html","page":"Additional GitHub Actions","title":"Additional GitHub Actions","text":"Creates a new PR whenever one of your dependencies releases a new version. Create a new action and copy the contents of this file.","category":"page"},{"location":"deps.html#Adding-Dependencies","page":"Adding Dependencies","title":"Adding Dependencies","text":"","category":"section"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Any registered package used by our new repo must be recorded in the Project.toml file. The easiest way to add packages is via the package manger. For our package, we are going to add StaticArrays.jl and LinearAlgebra as dependencies.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"To do this, we need to first activate the Project.toml file for our project using the package manager:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"] activate /path/to/AlgamesDriving","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Once activated, we add dependencies the exact same way we do normally:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(AlgamesDriving) pkg> add StaticArrays\n(AlgamesDriving) pkg> add LinearAlgebra\n(AlgamesDriving) pkg> resolve","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"The last command isn't always needed, but is recommended, since it updates our Manifest.toml file based on the contents of the Project.toml file.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"If we open our Project.toml file we should now see our packages under the [deps] header:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"name = \"AlgamesDriving\"\nuuid = \"bfba84be-7fa7-49e4-96a7-8b4754465918\"\nauthors = [\"Brian Jackson <simon-lc@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nLinearAlgebra = \"37e2e46d-f89d-539d-b4ee-838fcccc9c8e\"\nStaticArrays = \"90137ffa-7385-5640-81b9-e52037218182\"","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"We now need to specify the versions of the non-standard packages we officially support. The easiest–-and more conservative–-way to determine our compatibility is to restrict the versions to those that are currently being used. We can query this using the package manager:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(AlgamesDriving) pkg> st","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Which should return something like","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(Image: st)","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Here we see that LinearAlgebra is a part of the standard library since it doesn't have an associated version, and that we're using StaticArrays v0.12.4. Since all patches should be backward-compatible, we will allow any of the v0.12.x versions of StaticArrays.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"We add this compatibility requirement, along with our required Julia version, to the [compat] section of our Project.toml file:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"name = \"AlgamesDriving\"\nuuid = \"bfba84be-7fa7-49e4-96a7-8b4754465918\"\nauthors = [\"Brian Jackson <simon-lc@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nLinearAlgebra = \"37e2e46d-f89d-539d-b4ee-838fcccc9c8e\"\nStaticArrays = \"90137ffa-7385-5640-81b9-e52037218182\"\n\n[compat]\nStaticArrays = \"0.12\"\njulia = \"1\"","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"The Julia package registrator requires that all packages have upper-bounded compatibility requirements.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Before committing our Project.toml file, we need to make sure our Manifest.toml file isn't included in our repo, since this file is dependent on the environment of the user. Add Manifest.toml to your .gitignore file.","category":"page"},{"location":"new_repo.html#Creating-a-New-Package","page":"Creating a New Package","title":"Creating a New Package","text":"","category":"section"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"This is a summary of the instructions in the Julia Pkg manual.","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"Create a new repository on GitHub:  Follow the Julia package naming conventions. All julia package repos should have \".jl\" at the end.  Do NOT initialize the repo with a README or license at this point.\n(Image: New Repo)\nAfter creating the repo you should see a screen that looks like the one below. Copy the  repo URL.\n(Image: Blank Repo)\nIn your terminal on your computer, launch Julia. Generate the package files using the  package manager:\n ] generate AlgamesDriving\nThis will generate the Project.toml and a src/AlgamesDriving.jl files.\nCreate a README.md. Use whatever editor you prefer.\nCreate a git repo, add the remote, and push changes. These instructions are also found  in the previous image.\n cd AlgamesDriving\n git init\n git add -A\n git commit -m \"first commit\"\n git remote add origin https://github.com/simon-lc/AlgamesDriving.jl.git\n git push -u origin master\n(optional) Delete local files and add to Julia dev folder\n cd ..\n rm -rf AlgamesDriving\nRun Julia from your terminal and dev the package:\n ] dev https://github.com/simon-lc/AlgamesDriving.jl.git\nAlternatively, you can link to your local repository if you didn't delete it:\n ] dev /path/to/local/repo/AlgamesDriving","category":"page"},{"location":"CI.html#Setting-Up-CI","page":"Setting up CI","title":"Setting Up CI","text":"","category":"section"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"With a functional test suite, we are now ready to set up CI. Here we will demonstrate how to do this with GitHub actions.","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Open GitHub Actions panel in GitHub:  (Image: GHA)\nClick \"set up a workflow yourself\"  (Image: GHA_setup)\nRename the file to CI.yml  (Image: GHA_rename)\nPaste this code.  Which runs Julia v1.3 (under jobs/test/strategy/matrix/version) on Ubuntu, Mac, and  Windows (under jobs/test/strategy/matrix/os). The steps setup Julia, run the tests,  and then upload the code coverage results to codecov. This will run on any pull request  and on any push to the master branch.\nCommit the file and GitHub will automatically start running the tests\nAdd the badge: Go back to the GitHub Actions pane and select the currently running CI action and select \"Create Status Badge\", copy the badge link and paste it into the top of your README file. (Image: GHA_badge)","category":"page"},{"location":"index.html#AlgamesDriving","page":"Introduction","title":"AlgamesDriving","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Welcome to the documentation for my simple template repo for Julia! This repo is meant to help people get started quickly on setting up a new package in Julia, complete with documentation and CI.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"docs.html#Adding-Documentation","page":"Building documentation","title":"Adding Documentation","text":"","category":"section"},{"location":"docs.html","page":"Building documentation","title":"Building documentation","text":"This section details how to set up a documentation page using Documenter.jl. This is a more concise version of the instructions included in the documentation for that package.","category":"page"},{"location":"docs.html","page":"Building documentation","title":"Building documentation","text":"In your repo, create a docs/ directory, and a docs/src/ directory that will conntain  all the source .md files for your documentation.\nCreate a docs/make.jl file. This file is responsible for building and deploying your  documentation. Here is the basic starting point:\n using Documenter\n using AlgamesDriving  # your package name here\n\n makedocs(\n     sitename = \"AlgamesDriving\",  # your package name here\n     format = Documenter.HTML(prettyurls = false),  # optional\n     pages = [\n         \"Introduction\" => \"index.md\"\n     ]\n )\n\n # Documenter can also automatically deploy documentation to gh-pages.\n # See \"Hosting Documentation\" and deploydocs() in the Documenter manual\n # for more information.\n deploydocs(\n     repo = \"github.com/simon-lc/AlgamesDriving.jl.git\",\n )\nAdd documentation files to docs/src. Once the files are in docs/src, add them to  the makedocs command.\nAdd Documentation dependencies. Nearly identical to the tests, we need to add any  dependencies we use to build the documentation, which obviously must include Documenter.jl.  Activate the docs/ directory and add Documenter  julia> ] activate docs  (docs) pkg> add Documenter  Then add a [compat] entry for Documenter.\nAdd deploy keys for your repo. Install DocumenterTools.jl and enter the following into your REPL  using DocumenterTools  using AlgamesDriving                     # your package name here  DocumenterTools.genkeys(AlgamesDriving)  # your package name here  Copy the first public key (starts with ssh-rsa and ends with Documenter).  Go to your repository settings in GitHub and select \"Deploy Keys\". Add the deploy key,  using documenter as the name.  (Image: deploy_key)\nThen copy the very long environment variable and save it as the DOCUMENTER_KEY secret  on GitHub:  (Image: doc_key)\nAdd a GitHub Action to build your documentation. Create a new GitHub action  (called Documenter.yml) and paste the code found  here:\nAdd Documentation badge to README. Add the following line to the top of the file,  replacing the user/organize and repo names in the url:  [![](https://img.shields.io/badge/docs-dev-blue.svg)](https://simon-lc.github.io/AlgamesDriving.jl/dev)","category":"page"},{"location":"docs.html#Writing-Docstrings","page":"Building documentation","title":"Writing Docstrings","text":"","category":"section"},{"location":"docs.html","page":"Building documentation","title":"Building documentation","text":"As stated in the Julia manual, start the docstring with the signature, which is indented with 4 spaces so it prints as Julia code. You can use normal markdown syntax, such as headings, to make your docstrings look since and stay organized. See the above example and the Documenter.jl docs on how to include LaTeX math into the docstrings.","category":"page"},{"location":"docs.html#Building-documentation-locally","page":"Building documentation","title":"Building documentation locally","text":"","category":"section"},{"location":"docs.html","page":"Building documentation","title":"Building documentation","text":"You can build the documentation locally by only running the makedocs function, and disabling prettyurls. It's common to update docstrings in your code and want these changes reflected in your build. After making a change to the docstring, you need to \"rebuild\" the docstrings by executing the whole file, easily done with CTRL-SHIFT-RETURN in Juno. You can then rebuild the the docs (using CTRL-RETURN in Juno) and the docstrings will be updated.","category":"page"},{"location":"codecov.html#Adding-Code-Coverage","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"","category":"section"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"This section will detail how to get code coverage reports via codecov.io.","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"Go to codecov.io and log in.\nIn GitHub, add your repo in the CodeCov App settings. If you haven't set up codecov for  your organization or account, configure it via the GitHub App.  (Image: cc_add)\nIn codecov.io, select the parent organization or account and select \"Add new repository\".  If your repo doesn't show up, you can navigate directly to it in the URL bar, e.g.  https://codecov.io/gh/simon-lc/AlgamesDriving.jl.\nCopy the codecov token  (Image: cc_copytoken)\nAdd token to GitHub secrets. In GitHub, navigate to the settings for your repo, select  \"Secrets\" from the toolbar on the left, and select \"New Secret\". Name the token CODECOV_TOKEN  and copy the token from codecov.io.  (Image: codecov_secret)\nAdd the badge to your README. You can get a link to your badge by going to Settings in  codecov.io, selecting Badge from the right-hand side, and copying the Markdown link.  (Image: codecov_badge)","category":"page"}]
}
